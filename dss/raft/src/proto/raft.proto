syntax = "proto3";

package raftpb;

// log entry structure.
message LogEntry {
    // leader term.
    uint64 term = 1;
    // client command.
    bytes command = 2;
}

// persist storage structure.
message PersistStorage {
    // current term.
    uint64 term = 1;
    // vote for peer id, -1 is None.
    int64 voted_for = 2;
    // log commit index.
    uint64 commit_index = 3;
    // last apply log index.
    uint64 last_applied = 4;
    // log entries.
    repeated LogEntry log = 5;
    // last snapshot included index.
    uint64 last_included_index = 6;
    // last snapshot included term.
    uint64 last_included_term = 7;
}

// Example RequestVote RPC arguments structure.
message RequestVoteArgs {
    // candidate’s term
    uint64 term = 1;
    // candidate requesting vote
    uint64 candidate_id = 2;
    // index of candidate’s last log entry (§5.4)
    uint64 last_log_index = 3;
    // term of candidate’s last log entry (§5.4)
    uint64 last_log_term = 4;
}

// Example RequestVote RPC reply structure.
message RequestVoteReply {
    // currentTerm, for candidate to update itself
    uint64 term = 1;
    // true means candidate received vote
    bool vote_granted = 2;
}

// AppendEntries RPC arguments structure.
message AppendEntriesArgs {
    // leader’s term
    uint64 term = 1;
    // so follower can redirect clients
    uint64 leader_id = 2;
    // index of log entry immediately preceding new ones
    uint64 prev_log_index = 3;
    // term of prevLogIndex entry
    uint64 prev_log_term = 4;
    // log entries to store (empty for heartbeat;
    // may send more than one for efficiency)
    repeated LogEntry entries = 5;
    // leader’s commitIndex
    uint64 leader_commit = 6;
}

// AppendEntries RPC reply structure.
message AppendEntriesReply {
    // currentTerm, for leader to update itself
    uint64 term = 1;
    // true if follower contained entry matching
    // prevLogIndex and prevLogTerm
    bool success = 2;
    // conflict extend fields.
    uint64 conflict_index = 3;
    uint64 conflict_term = 4;
}

// InstallSnapshot RPC arguments structure.
message InstallSnapshotArgs {
    // leader's term
    uint64 term = 1;
    // so follower can redirect clients
    uint64 leader_id = 2;
    // the snapshot replaces all entries up through
    // and including this index
    uint64 last_included_index = 3;
    // term of lastIncludedIndex
    uint64 lastIncludedTerm = 4;
    // raw bytes of the snapshot chunk
    bytes snapshot = 5;
}

// InstallSnapshot RPC reply structure.
message InstallSnapshotReply {
    // currentTerm, for leader to update itself
    uint64 term = 1;
}
